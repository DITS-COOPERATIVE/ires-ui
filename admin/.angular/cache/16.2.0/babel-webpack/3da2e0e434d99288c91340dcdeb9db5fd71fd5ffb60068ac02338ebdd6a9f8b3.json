{"ast":null,"code":"var _class;\nimport { getStyle, hexToRgba } from '@coreui/utils';\nimport * as i0 from \"@angular/core\";\nexport class DashboardChartsData {\n  constructor() {\n    this.mainChart = {};\n    this.initMainChart();\n  }\n  random(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n  initMainChart(period = 'Month') {\n    const brandSuccess = getStyle('--cui-success') ?? '#4dbd74';\n    const brandInfo = getStyle('--cui-info') ?? '#20a8d8';\n    const brandInfoBg = hexToRgba(brandInfo, 10);\n    const brandDanger = getStyle('--cui-danger') || '#f86c6b';\n    // mainChart\n    // mainChart\n    this.mainChart['elements'] = period === 'Month' ? 12 : 27;\n    this.mainChart['Data1'] = [];\n    this.mainChart['Data2'] = [];\n    this.mainChart['Data3'] = [];\n    // generate random values for mainChart\n    for (let i = 0; i <= this.mainChart['elements']; i++) {\n      this.mainChart['Data1'].push(this.random(50, 240));\n      this.mainChart['Data2'].push(this.random(20, 160));\n      this.mainChart['Data3'].push(65);\n    }\n    let labels = [];\n    if (period === 'Month') {\n      labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    } else {\n      /* tslint:disable:max-line-length */\n      const week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n      labels = week.concat(week, week, week);\n    }\n    const colors = [{\n      // brandInfo\n      backgroundColor: brandInfoBg,\n      borderColor: brandInfo,\n      pointHoverBackgroundColor: brandInfo,\n      borderWidth: 2,\n      fill: true\n    }, {\n      // brandSuccess\n      backgroundColor: 'transparent',\n      borderColor: brandSuccess || '#4dbd74',\n      pointHoverBackgroundColor: '#fff'\n    }, {\n      // brandDanger\n      backgroundColor: 'transparent',\n      borderColor: brandDanger || '#f86c6b',\n      pointHoverBackgroundColor: brandDanger,\n      borderWidth: 1,\n      borderDash: [8, 5]\n    }];\n    const datasets = [{\n      data: this.mainChart['Data1'],\n      label: 'Current',\n      ...colors[0]\n    }, {\n      data: this.mainChart['Data2'],\n      label: 'Previous',\n      ...colors[1]\n    }, {\n      data: this.mainChart['Data3'],\n      label: 'BEP',\n      ...colors[2]\n    }];\n    const plugins = {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        callbacks: {\n          labelColor: function (context) {\n            return {\n              backgroundColor: context.dataset.borderColor\n            };\n          }\n        }\n      }\n    };\n    const options = {\n      maintainAspectRatio: false,\n      plugins,\n      scales: {\n        x: {\n          grid: {\n            drawOnChartArea: false\n          }\n        },\n        y: {\n          beginAtZero: true,\n          max: 250,\n          ticks: {\n            maxTicksLimit: 5,\n            stepSize: Math.ceil(250 / 5)\n          }\n        }\n      },\n      elements: {\n        line: {\n          tension: 0.4\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4,\n          hoverBorderWidth: 3\n        }\n      }\n    };\n    this.mainChart.type = 'line';\n    this.mainChart.options = options;\n    this.mainChart.data = {\n      datasets,\n      labels\n    };\n  }\n}\n_class = DashboardChartsData;\n_class.ɵfac = function DashboardChartsData_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'any'\n});","map":{"version":3,"names":["getStyle","hexToRgba","DashboardChartsData","constructor","mainChart","initMainChart","random","min","max","Math","floor","period","brandSuccess","brandInfo","brandInfoBg","brandDanger","i","push","labels","week","concat","colors","backgroundColor","borderColor","pointHoverBackgroundColor","borderWidth","fill","borderDash","datasets","data","label","plugins","legend","display","tooltip","callbacks","labelColor","context","dataset","options","maintainAspectRatio","scales","x","grid","drawOnChartArea","y","beginAtZero","ticks","maxTicksLimit","stepSize","ceil","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","type","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Capstone\\Desktop\\DITS\\ires-ui\\admin\\src\\app\\pages\\dashboard\\dashboard-charts-data.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { getStyle, hexToRgba } from '@coreui/utils';\r\n\r\nexport interface IChartProps {\r\n  data?: any;\r\n  labels?: any;\r\n  options?: any;\r\n  colors?: any;\r\n  type?: any;\r\n  legend?: any;\r\n\r\n  [propName: string]: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'any'\r\n})\r\nexport class DashboardChartsData {\r\n  constructor() {\r\n    this.initMainChart();\r\n  }\r\n\r\n  public mainChart: IChartProps = {};\r\n\r\n  public random(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  initMainChart(period: string = 'Month') {\r\n    const brandSuccess = getStyle('--cui-success') ?? '#4dbd74';\r\n    const brandInfo = getStyle('--cui-info') ?? '#20a8d8';\r\n    const brandInfoBg = hexToRgba(brandInfo, 10);\r\n    const brandDanger = getStyle('--cui-danger') || '#f86c6b';\r\n\r\n    // mainChart\r\n    // mainChart\r\n    this.mainChart['elements'] = period === 'Month' ? 12 : 27;\r\n    this.mainChart['Data1'] = [];\r\n    this.mainChart['Data2'] = [];\r\n    this.mainChart['Data3'] = [];\r\n\r\n    // generate random values for mainChart\r\n    for (let i = 0; i <= this.mainChart['elements']; i++) {\r\n      this.mainChart['Data1'].push(this.random(50, 240));\r\n      this.mainChart['Data2'].push(this.random(20, 160));\r\n      this.mainChart['Data3'].push(65);\r\n    }\r\n\r\n    let labels: string[] = [];\r\n    if (period === 'Month') {\r\n      labels = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n      ];\r\n    } else {\r\n      /* tslint:disable:max-line-length */\r\n      const week = [\r\n        'Monday',\r\n        'Tuesday',\r\n        'Wednesday',\r\n        'Thursday',\r\n        'Friday',\r\n        'Saturday',\r\n        'Sunday'\r\n      ];\r\n      labels = week.concat(week, week, week);\r\n    }\r\n\r\n    const colors = [\r\n      {\r\n        // brandInfo\r\n        backgroundColor: brandInfoBg,\r\n        borderColor: brandInfo,\r\n        pointHoverBackgroundColor: brandInfo,\r\n        borderWidth: 2,\r\n        fill: true\r\n      },\r\n      {\r\n        // brandSuccess\r\n        backgroundColor: 'transparent',\r\n        borderColor: brandSuccess || '#4dbd74',\r\n        pointHoverBackgroundColor: '#fff'\r\n      },\r\n      {\r\n        // brandDanger\r\n        backgroundColor: 'transparent',\r\n        borderColor: brandDanger || '#f86c6b',\r\n        pointHoverBackgroundColor: brandDanger,\r\n        borderWidth: 1,\r\n        borderDash: [8, 5]\r\n      }\r\n    ];\r\n\r\n    const datasets = [\r\n      {\r\n        data: this.mainChart['Data1'],\r\n        label: 'Current',\r\n        ...colors[0]\r\n      },\r\n      {\r\n        data: this.mainChart['Data2'],\r\n        label: 'Previous',\r\n        ...colors[1]\r\n      },\r\n      {\r\n        data: this.mainChart['Data3'],\r\n        label: 'BEP',\r\n        ...colors[2]\r\n      }\r\n    ];\r\n\r\n    const plugins = {\r\n      legend: {\r\n        display: false\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          labelColor: function(context: any) {\r\n            return {\r\n              backgroundColor: context.dataset.borderColor\r\n            };\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    const options = {\r\n      maintainAspectRatio: false,\r\n      plugins,\r\n      scales: {\r\n        x: {\r\n          grid: {\r\n            drawOnChartArea: false\r\n          }\r\n        },\r\n        y: {\r\n          beginAtZero: true,\r\n          max: 250,\r\n          ticks: {\r\n            maxTicksLimit: 5,\r\n            stepSize: Math.ceil(250 / 5)\r\n          }\r\n        }\r\n      },\r\n      elements: {\r\n        line: {\r\n          tension: 0.4\r\n        },\r\n        point: {\r\n          radius: 0,\r\n          hitRadius: 10,\r\n          hoverRadius: 4,\r\n          hoverBorderWidth: 3\r\n        }\r\n      }\r\n    };\r\n\r\n    this.mainChart.type = 'line';\r\n    this.mainChart.options = options;\r\n    this.mainChart.data = {\r\n      datasets,\r\n      labels\r\n    };\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}