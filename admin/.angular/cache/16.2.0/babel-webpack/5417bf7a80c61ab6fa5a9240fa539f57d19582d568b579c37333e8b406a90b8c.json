{"ast":null,"code":"\"use strict\";\n\n// import { Injectable } from '@angular/core';\n// import { getStyle, hexToRgba } from '@coreui/utils';\n// export interface IChartProps {\n//   data?: any;\n//   labels?: any;\n//   options?: any;\n//   colors?: any;\n//   type?: any;\n//   legend?: any;\n//   [propName: string]: any;\n// }\n// @Injectable({\n//   providedIn: 'any'\n// })\n// export class DashboardChartsData {\n//   constructor() {\n//     this.initMainChart();\n//   }\n//   public mainChart: IChartProps = {};\n//   public random(min: number, max: number) {\n//     return Math.floor(Math.random() * (max - min + 1) + min);\n//   }\n//   initMainChart(period: string = 'Month') {\n//     const brandSuccess = getStyle('--cui-success') ?? '#4dbd74';\n//     const brandInfo = getStyle('--cui-info') ?? '#20a8d8';\n//     const brandInfoBg = hexToRgba(brandInfo, 10);\n//     const brandDanger = getStyle('--cui-danger') || '#f86c6b';\n//     // mainChart\n//     // mainChart\n//     this.mainChart['elements'] = period === 'Month' ? 12 : 27;\n//     this.mainChart['Data1'] = [];\n//     this.mainChart['Data2'] = [];\n//     this.mainChart['Data3'] = [];\n//     // generate random values for mainChart\n//     for (let i = 0; i <= this.mainChart['elements']; i++) {\n//       this.mainChart['Data1'].push(this.random(50, 240));\n//       this.mainChart['Data2'].push(this.random(20, 160));\n//       this.mainChart['Data3'].push(65);\n//     }\n//     let labels: string[] = [];\n//     if (period === 'Month') {\n//       labels = [\n//         'January',\n//         'February',\n//         'March',\n//         'April',\n//         'May',\n//         'June',\n//         'July',\n//         'August',\n//         'September',\n//         'October',\n//         'November',\n//         'December'\n//       ];\n//     } else {\n//       /* tslint:disable:max-line-length */\n//       const week = [\n//         'Monday',\n//         'Tuesday',\n//         'Wednesday',\n//         'Thursday',\n//         'Friday',\n//         'Saturday',\n//         'Sunday'\n//       ];\n//       labels = week.concat(week, week, week);\n//     }\n//     const colors = [\n//       {\n//         // brandInfo\n//         backgroundColor: brandInfoBg,\n//         borderColor: brandInfo,\n//         pointHoverBackgroundColor: brandInfo,\n//         borderWidth: 2,\n//         fill: true\n//       },\n//       {\n//         // brandSuccess\n//         backgroundColor: 'transparent',\n//         borderColor: brandSuccess || '#4dbd74',\n//         pointHoverBackgroundColor: '#fff'\n//       },\n//       {\n//         // brandDanger\n//         backgroundColor: 'transparent',\n//         borderColor: brandDanger || '#f86c6b',\n//         pointHoverBackgroundColor: brandDanger,\n//         borderWidth: 1,\n//         borderDash: [8, 5]\n//       }\n//     ];\n//     const datasets = [\n//       {\n//         data: this.mainChart['Data1'],\n//         label: 'Current',\n//         ...colors[0]\n//       },\n//       {\n//         data: this.mainChart['Data2'],\n//         label: 'Previous',\n//         ...colors[1]\n//       },\n//       {\n//         data: this.mainChart['Data3'],\n//         label: 'BEP',\n//         ...colors[2]\n//       }\n//     ];\n//     const plugins = {\n//       legend: {\n//         display: false\n//       },\n//       tooltip: {\n//         callbacks: {\n//           labelColor: function(context: any) {\n//             return {\n//               backgroundColor: context.dataset.borderColor\n//             };\n//           }\n//         }\n//       }\n//     };\n//     const options = {\n//       maintainAspectRatio: false,\n//       plugins,\n//       scales: {\n//         x: {\n//           grid: {\n//             drawOnChartArea: false\n//           }\n//         },\n//         y: {\n//           beginAtZero: true,\n//           max: 250,\n//           ticks: {\n//             maxTicksLimit: 5,\n//             stepSize: Math.ceil(250 / 5)\n//           }\n//         }\n//       },\n//       elements: {\n//         line: {\n//           tension: 0.4\n//         },\n//         point: {\n//           radius: 0,\n//           hitRadius: 10,\n//           hoverRadius: 4,\n//           hoverBorderWidth: 3\n//         }\n//       }\n//     };\n//     this.mainChart.type = 'line';\n//     this.mainChart.options = options;\n//     this.mainChart.data = {\n//       datasets,\n//       labels\n//     };\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Capstone\\Desktop\\DITS\\ires-ui\\admin\\src\\app\\pages\\dashboard\\dashboard-charts-data.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n// import { getStyle, hexToRgba } from '@coreui/utils';\r\n\r\n// export interface IChartProps {\r\n//   data?: any;\r\n//   labels?: any;\r\n//   options?: any;\r\n//   colors?: any;\r\n//   type?: any;\r\n//   legend?: any;\r\n\r\n//   [propName: string]: any;\r\n// }\r\n\r\n// @Injectable({\r\n//   providedIn: 'any'\r\n// })\r\n// export class DashboardChartsData {\r\n//   constructor() {\r\n//     this.initMainChart();\r\n//   }\r\n\r\n//   public mainChart: IChartProps = {};\r\n\r\n//   public random(min: number, max: number) {\r\n//     return Math.floor(Math.random() * (max - min + 1) + min);\r\n//   }\r\n\r\n//   initMainChart(period: string = 'Month') {\r\n//     const brandSuccess = getStyle('--cui-success') ?? '#4dbd74';\r\n//     const brandInfo = getStyle('--cui-info') ?? '#20a8d8';\r\n//     const brandInfoBg = hexToRgba(brandInfo, 10);\r\n//     const brandDanger = getStyle('--cui-danger') || '#f86c6b';\r\n\r\n//     // mainChart\r\n//     // mainChart\r\n//     this.mainChart['elements'] = period === 'Month' ? 12 : 27;\r\n//     this.mainChart['Data1'] = [];\r\n//     this.mainChart['Data2'] = [];\r\n//     this.mainChart['Data3'] = [];\r\n\r\n//     // generate random values for mainChart\r\n//     for (let i = 0; i <= this.mainChart['elements']; i++) {\r\n//       this.mainChart['Data1'].push(this.random(50, 240));\r\n//       this.mainChart['Data2'].push(this.random(20, 160));\r\n//       this.mainChart['Data3'].push(65);\r\n//     }\r\n\r\n//     let labels: string[] = [];\r\n//     if (period === 'Month') {\r\n//       labels = [\r\n//         'January',\r\n//         'February',\r\n//         'March',\r\n//         'April',\r\n//         'May',\r\n//         'June',\r\n//         'July',\r\n//         'August',\r\n//         'September',\r\n//         'October',\r\n//         'November',\r\n//         'December'\r\n//       ];\r\n//     } else {\r\n//       /* tslint:disable:max-line-length */\r\n//       const week = [\r\n//         'Monday',\r\n//         'Tuesday',\r\n//         'Wednesday',\r\n//         'Thursday',\r\n//         'Friday',\r\n//         'Saturday',\r\n//         'Sunday'\r\n//       ];\r\n//       labels = week.concat(week, week, week);\r\n//     }\r\n\r\n//     const colors = [\r\n//       {\r\n//         // brandInfo\r\n//         backgroundColor: brandInfoBg,\r\n//         borderColor: brandInfo,\r\n//         pointHoverBackgroundColor: brandInfo,\r\n//         borderWidth: 2,\r\n//         fill: true\r\n//       },\r\n//       {\r\n//         // brandSuccess\r\n//         backgroundColor: 'transparent',\r\n//         borderColor: brandSuccess || '#4dbd74',\r\n//         pointHoverBackgroundColor: '#fff'\r\n//       },\r\n//       {\r\n//         // brandDanger\r\n//         backgroundColor: 'transparent',\r\n//         borderColor: brandDanger || '#f86c6b',\r\n//         pointHoverBackgroundColor: brandDanger,\r\n//         borderWidth: 1,\r\n//         borderDash: [8, 5]\r\n//       }\r\n//     ];\r\n\r\n//     const datasets = [\r\n//       {\r\n//         data: this.mainChart['Data1'],\r\n//         label: 'Current',\r\n//         ...colors[0]\r\n//       },\r\n//       {\r\n//         data: this.mainChart['Data2'],\r\n//         label: 'Previous',\r\n//         ...colors[1]\r\n//       },\r\n//       {\r\n//         data: this.mainChart['Data3'],\r\n//         label: 'BEP',\r\n//         ...colors[2]\r\n//       }\r\n//     ];\r\n\r\n//     const plugins = {\r\n//       legend: {\r\n//         display: false\r\n//       },\r\n//       tooltip: {\r\n//         callbacks: {\r\n//           labelColor: function(context: any) {\r\n//             return {\r\n//               backgroundColor: context.dataset.borderColor\r\n//             };\r\n//           }\r\n//         }\r\n//       }\r\n//     };\r\n\r\n//     const options = {\r\n//       maintainAspectRatio: false,\r\n//       plugins,\r\n//       scales: {\r\n//         x: {\r\n//           grid: {\r\n//             drawOnChartArea: false\r\n//           }\r\n//         },\r\n//         y: {\r\n//           beginAtZero: true,\r\n//           max: 250,\r\n//           ticks: {\r\n//             maxTicksLimit: 5,\r\n//             stepSize: Math.ceil(250 / 5)\r\n//           }\r\n//         }\r\n//       },\r\n//       elements: {\r\n//         line: {\r\n//           tension: 0.4\r\n//         },\r\n//         point: {\r\n//           radius: 0,\r\n//           hitRadius: 10,\r\n//           hoverRadius: 4,\r\n//           hoverBorderWidth: 3\r\n//         }\r\n//       }\r\n//     };\r\n\r\n//     this.mainChart.type = 'line';\r\n//     this.mainChart.options = options;\r\n//     this.mainChart.data = {\r\n//       datasets,\r\n//       labels\r\n//     };\r\n//   }\r\n\r\n// }\r\n"],"mappings},"metadata":{},"sourceType":"script","externalDependencies":[]}